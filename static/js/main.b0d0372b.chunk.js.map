{"version":3,"sources":["components/UlykkePopup/UlykkePopup.js","components/Ulykker/hentUlykker.js","components/Ulykker/Ulykker.js","App.js","serviceWorker.js","index.js"],"names":["UlykkePopup","props","antall","aktivUlykke","onClose","Popup","position","koordinater","lat","lon","autoPan","uhellKategori","ulykkesdato","ulykkeskode","antallEnheter","antallDrepte","antallMegetAlvorligSkadde","antallAlvorligSkadde","antallLettereSkadde","alvorlighetsgrad","finnKoordinater","ulykke","wkt","geometri","koordinaterString","split","parseFloat","finnEgenskap","egenskapTypeId","egenskaper","find","egenskap","id","verdi","finnUlykkesdato","finnUhellKategori","finnUlykkeskode","finnAntallEnheter","finnAntallDrepte","finnAntallMegetAlvorligSkadde","finnAntallAlvorligSkadde","finnAntallLettereSkadde","finnAlvorlighetsgrad","hentUlykker","vest","sør","øst","nord","a","returnerteUlykker","hentFlere","start","requestParams","srid","inkluder","kartutsnitt","axios","get","headers","params","response","concat","data","objekter","metadata","neste","console","log","length","map","Ulykker","useLeafletBounds","useState","ulykker","setUlykker","React","setAktivUlykke","hentUlykkeIkon","sti","Icon","iconUrl","iconSize","iconAnchor","useEffect","hentedeUlykker","filter","Marker","key","icon","onclick","App","Map","center","zoom","TileLayer","url","attribution","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b0d0372b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Popup } from \"react-leaflet\";\r\n\r\nfunction UlykkePopup(props) {\r\n  const aktivUlykke = props.aktivUlykke;\r\n  const onClose = props.onClose;\r\n\r\n  function involverteEnheter(antall) {\r\n    return antall === 1 ? \"1 involvert enhet\" : `${antall} involverte enheter`;\r\n  }\r\n\r\n  function antallDrepte(antall) {\r\n    return antall === 1 ? \"1 drept\" : `${antall} drepte`;\r\n  }\r\n\r\n  function antallMegetAlvorligSkadde(antall) {\r\n    return antall === 1\r\n      ? \"1 meget alvorlig skadd\"\r\n      : `${antall} meget alvorlig skadde`;\r\n  }\r\n\r\n  function antallAlvorligSkadde(antall) {\r\n    return antall === 1 ? \"1 alvorlig skadd\" : `${antall} alvorlig skadde`;\r\n  }\r\n\r\n  function antallLettereSkadde(antall) {\r\n    return antall === 1 ? \"1 lettere skadd\" : `${antall} lettere skadde`;\r\n  }\r\n\r\n  function uhellKategori() {\r\n    return aktivUlykke.uhellKategori === \"Mc ulykke\"\r\n      ? \"MC-ulykke\"\r\n      : aktivUlykke.uhellKategori;\r\n  }\r\n\r\n  return (\r\n    <Popup\r\n      position={[aktivUlykke.koordinater.lat, aktivUlykke.koordinater.lon]}\r\n      onClose={onClose}\r\n      autoPan={false}\r\n    >\r\n      <h2>\r\n        {uhellKategori()} ({aktivUlykke.ulykkesdato})\r\n      </h2>\r\n      <h3>{aktivUlykke.ulykkeskode}</h3>\r\n      <span>{involverteEnheter(aktivUlykke.antallEnheter)}</span>\r\n      <br />\r\n      {aktivUlykke.antallDrepte > 0 && (\r\n        <>\r\n          <span>{antallDrepte(aktivUlykke.antallDrepte)}</span>\r\n          <br />\r\n        </>\r\n      )}\r\n      {aktivUlykke.antallMegetAlvorligSkadde > 0 && (\r\n        <>\r\n          <span>\r\n            {antallMegetAlvorligSkadde(aktivUlykke.antallMegetAlvorligSkadde)}\r\n          </span>\r\n          <br />\r\n        </>\r\n      )}\r\n      {aktivUlykke.antallAlvorligSkadde > 0 && (\r\n        <>\r\n          <span>{antallAlvorligSkadde(aktivUlykke.antallAlvorligSkadde)}</span>\r\n          <br />\r\n        </>\r\n      )}\r\n      {aktivUlykke.antallLettereSkadde > 0 && (\r\n        <>\r\n          <span>{antallLettereSkadde(aktivUlykke.antallLettereSkadde)}</span>\r\n          <br />\r\n        </>\r\n      )}\r\n      {aktivUlykke.alvorlighetsgrad === \"USKADET\" && <span>Ingen skadde</span>}\r\n      {aktivUlykke.alvorlighetsgrad === \"IKKEREGISTRERT\" && (\r\n        <span>Alvorlighetsgrad ikke registrert</span>\r\n      )}\r\n    </Popup>\r\n  );\r\n}\r\n\r\nexport default UlykkePopup;\r\n","import axios from \"axios\";\r\n\r\nconst ulykkerUrl = \"https://nvdbapiles-v3.atlas.vegvesen.no/vegobjekter/570\";\r\n\r\nconst finnKoordinater = (ulykke) => {\r\n  const wkt = ulykke?.geometri?.wkt;\r\n  const split = wkt?.split(/[()]/);\r\n  const koordinaterString = split[1];\r\n  if (!koordinaterString) return null;\r\n  const koordinater = koordinaterString.split(\" \");\r\n  return {\r\n    lat: parseFloat(koordinater[0]),\r\n    lon: parseFloat(koordinater[1]),\r\n  };\r\n};\r\n\r\nconst finnEgenskap = (ulykke, egenskapTypeId) => {\r\n  const antall = ulykke?.egenskaper?.find(\r\n    (egenskap) => egenskap.id === egenskapTypeId\r\n  );\r\n  return antall?.verdi;\r\n};\r\n\r\nconst finnUlykkesdato = (ulykke) => finnEgenskap(ulykke, 5055);\r\nconst finnUhellKategori = (ulykke) => finnEgenskap(ulykke, 5065);\r\nconst finnUlykkeskode = (ulykke) => finnEgenskap(ulykke, 5066);\r\nconst finnAntallEnheter = (ulykke) => finnEgenskap(ulykke, 5069);\r\nconst finnAntallDrepte = (ulykke) => finnEgenskap(ulykke, 5070);\r\nconst finnAntallMegetAlvorligSkadde = (ulykke) => finnEgenskap(ulykke, 5071);\r\nconst finnAntallAlvorligSkadde = (ulykke) => finnEgenskap(ulykke, 5072);\r\nconst finnAntallLettereSkadde = (ulykke) => finnEgenskap(ulykke, 5073);\r\nconst finnAlvorlighetsgrad = (ulykke) => finnEgenskap(ulykke, 5074);\r\n\r\nconst hentUlykker = async (vest, sør, øst, nord) => {\r\n  let returnerteUlykker = [];\r\n  let hentFlere = true;\r\n  let start = \"\";\r\n\r\n  var requestParams = {\r\n    srid: \"wgs84\",\r\n    inkluder: \"geometri,egenskaper\",\r\n    kartutsnitt: `${vest},${sør},${øst},${nord}`,\r\n    egenskap: \"(5055>='2019-01-01')AND(5055<='2019-12-31')\",\r\n  };\r\n\r\n  while (hentFlere === true) {\r\n    if (start !== \"\") {\r\n      requestParams.start = start;\r\n    }\r\n    const response = await axios.get(ulykkerUrl, {\r\n      headers: {\r\n        \"X-Client\": \"trafikkulykker.no\",\r\n      },\r\n      params: requestParams,\r\n    });\r\n\r\n    returnerteUlykker = returnerteUlykker.concat(response.data.objekter);\r\n\r\n    if (start !== response.data.metadata.neste.start) {\r\n      start = response.data.metadata.neste.start;\r\n    } else {\r\n      hentFlere = false;\r\n    }\r\n  }\r\n\r\n  console.log(`Hentet ${returnerteUlykker.length} ulykker`);\r\n  console.log(returnerteUlykker);\r\n\r\n  return returnerteUlykker.map((ulykke) => {\r\n    return {\r\n      id: ulykke.id,\r\n      koordinater: finnKoordinater(ulykke),\r\n      ulykkesdato: finnUlykkesdato(ulykke),\r\n      uhellKategori: finnUhellKategori(ulykke),\r\n      ulykkeskode: finnUlykkeskode(ulykke),\r\n      antallEnheter: finnAntallEnheter(ulykke),\r\n      antallDrepte: finnAntallDrepte(ulykke),\r\n      antallMegetAlvorligSkadde: finnAntallMegetAlvorligSkadde(ulykke),\r\n      antallAlvorligSkadde: finnAntallAlvorligSkadde(ulykke),\r\n      antallLettereSkadde: finnAntallLettereSkadde(ulykke),\r\n      alvorlighetsgrad: finnAlvorlighetsgrad(ulykke),\r\n    };\r\n  });\r\n};\r\n\r\nexport default hentUlykker;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Marker } from \"react-leaflet\";\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport { useLeafletBounds } from \"use-leaflet\";\r\nimport { Icon } from \"leaflet\";\r\nimport UlykkePopup from \"../UlykkePopup\";\r\nimport hentUlykker from \"./hentUlykker\";\r\n\r\nfunction Ulykker() {\r\n  const [[sør, vest], [nord, øst]] = useLeafletBounds();\r\n\r\n  const [ulykker, setUlykker] = useState([]);\r\n  const [aktivUlykke, setAktivUlykke] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const hentedeUlykker = await hentUlykker(vest, sør, øst, nord);\r\n      setUlykker(hentedeUlykker.filter((ulykke) => ulykke.koordinater != null));\r\n    })();\r\n  }, [vest, sør, øst, nord]);\r\n\r\n  function hentUlykkeIkon(alvorlighetsgrad) {\r\n    var sti = \"\";\r\n    switch (alvorlighetsgrad) {\r\n      case \"Uskadd\":\r\n        sti = \"images/marker-icon-green.png\";\r\n        break;\r\n      case \"Lettere skadd\":\r\n        sti = \"images/marker-icon-yellow.png\";\r\n        break;\r\n      case \"Alvorlig skadd\":\r\n        sti = \"images/marker-icon-orange.png\";\r\n        break;\r\n      case \"Meget alvorlig skadd\":\r\n        sti = \"images/marker-icon-red.png\";\r\n        break;\r\n      case \"Drept\":\r\n        sti = \"images/marker-icon-black.png\";\r\n        break;\r\n      default:\r\n        sti = \"images/marker-icon-gray.png\";\r\n        break;\r\n    }\r\n    return new Icon({\r\n      iconUrl: sti,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [12, 40],\r\n    });\r\n  }\r\n\r\n  return (\r\n    <MarkerClusterGroup>\r\n      {ulykker &&\r\n        ulykker.map((ulykke) => (\r\n          <Marker\r\n            key={ulykke.id}\r\n            position={[ulykke.koordinater.lat, ulykke.koordinater.lon]}\r\n            icon={hentUlykkeIkon(ulykke.alvorlighetsgrad)}\r\n            onclick={() => {\r\n              setAktivUlykke(ulykke);\r\n            }}\r\n          />\r\n        ))}\r\n\r\n      {aktivUlykke && (\r\n        <UlykkePopup\r\n          aktivUlykke={aktivUlykke}\r\n          onClose={() => {\r\n            setAktivUlykke(null);\r\n          }}\r\n        ></UlykkePopup>\r\n      )}\r\n    </MarkerClusterGroup>\r\n  );\r\n}\r\n\r\nexport default Ulykker;\r\n","import React from \"react\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport \"./App.css\";\r\n\r\nimport Ulykker from \"./components/Ulykker\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Map center={[63.430515, 10.395053]} zoom={12}>\r\n      <TileLayer\r\n        url=\"https://opencache.statkart.no/gatekeeper/gk/gk.open_gmaps?layers=norges_grunnkart&zoom={z}&x={x}&y={y}\"\r\n        attribution=\"<a href='https://www.kartverket.no/'>Kartverket</a>\"\r\n      />\r\n      <Ulykker></Ulykker>\r\n    </Map>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}